package hieuUng;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class menu extends JPanel {
    private static final Color DEFAULT_COLOR = new Color(0x013034);
    private static final Color ACTIVE_COLOR = new Color(0xA4C639);
    private static final Color HOVER_COLOR = new Color(0x005F5B);

    private ArrayList<JMenuItem> allMenuItems = new ArrayList<>();
    private Map<JButton, JPopupMenu> menuMap = new HashMap<>();
    private JButton activeButton = null;

    public menu(Object[][] menuItems) {
        setLayout(new GridLayout(0, 1, 5, 5));
        setBackground(DEFAULT_COLOR);
        createMenu(menuItems);

        // Đóng tất cả menu khi click ra ngoài
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                closeAllMenus();
            }
        });
    }

    private void createMenu(Object[][] menuItems) {
        for (Object[] menu : menuItems) {
            String menuText = (String) menu[0];
            String menuIconPath = (String) menu[1];
            JButton mainButton = createButton(menuText, menuIconPath);
            JPopupMenu subMenu = new JPopupMenu();
            subMenu.setBorder(BorderFactory.createLineBorder(Color.BLACK));

            for (String[] subItem : (String[][]) menu[2]) {
                String subText = subItem[0];
                String subIconPath = subItem[1];
                JMenuItem subButton = new JMenuItem(subText, ImageResizer.resizeImage(subIconPath, 40, 40));
                subButton.setFont(new Font("Arial", Font.PLAIN, 18));
                subButton.setBackground(DEFAULT_COLOR);
                subButton.setForeground(Color.WHITE);

                subButton.addActionListener(e -> {
                    resetMenuColors();
                    subButton.setBackground(ACTIVE_COLOR);
                    openPage(subText);
                    closeAllMenus();
                });

                allMenuItems.add(subButton);
                subMenu.add(subButton);
            }

            mainButton.addActionListener(e -> toggleSubMenu(mainButton, subMenu));
            mainButton.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    if (mainButton != activeButton) {
                        mainButton.setBackground(HOVER_COLOR);
                    }
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    if (mainButton != activeButton) {
                        mainButton.setBackground(DEFAULT_COLOR);
                    }
                }
            });

            menuMap.put(mainButton, subMenu);
            add(mainButton);
        }
    }

    private JButton createButton(String text, String iconPath) {
        JButton button = new JButton(text, ImageResizer.resizeImage(iconPath, 40, 40));
        button.setFont(new Font("Arial", Font.BOLD, 20));
        button.setBackground(DEFAULT_COLOR);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setHorizontalAlignment(SwingConstants.LEFT);
        button.setIconTextGap(15);
        return button;
    }

    private void toggleSubMenu(JButton mainButton, JPopupMenu subMenu) {
        if (subMenu.isVisible()) {
            closeAllMenus();
        } else {
            closeAllMenus();
            subMenu.show(mainButton, mainButton.getWidth(), 0);
            mainButton.setBackground(ACTIVE_COLOR);
            activeButton = mainButton;
        }
    }

    private void closeAllMenus() {
        for (JButton button : menuMap.keySet()) {
            menuMap.get(button).setVisible(false);
            button.setBackground(DEFAULT_COLOR);
        }
        activeButton = null;
    }

    private void resetMenuColors() {
        for (JMenuItem item : allMenuItems) {
            item.setBackground(DEFAULT_COLOR);
        }
    }

    private void openPage(String pageName) {
        JFrame newFrame = new JFrame(pageName);
        newFrame.setSize(600, 400);
        newFrame.setLocationRelativeTo(null);
        newFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        newFrame.add(new JLabel("Bạn đang ở trang: " + pageName, SwingConstants.CENTER), BorderLayout.CENTER);
        newFrame.setVisible(true);
    }

    public static void main(String[] args) {
        Object[][] menuItems = {
                { "Thuốc", "/image/menuThuoc.png",
                        new String[][] { { "Cập nhật", "/image/bútchi.png" }, { "Tìm kiếm", "/image/bútchi.png" },
                                { "Đặt thuốc", "/image/bútchi.png" }, { "Đổi thuốc", "/image/bútchi.png" },
                                { "Trả thuốc", "/image/bútchi.png" }, { "Thống kê", "/image/bútchi.png" } } },
                { "Hóa đơn", "/image/menuHoaDon.png",
                        new String[][] { { "Cập nhật", "/image/bútchi.png" }, { "Tìm kiếm", "/image/bútchi.png" },
                                { "Lập hóa đơn", "/image/bútchi.png" } } },
                { "Nhân viên", "/image/menuNhanVien.png",
                        new String[][] { { "Cập nhật", "/image/bútchi.png" }, { "Tìm kiếm", "/image/bútchi.png" },
                                { "Thống kê", "/image/bútchi.png" } } }
        };

        JFrame frame = new JFrame("Menu Demo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 600);
        frame.setLocationRelativeTo(null);
        frame.add(new menu(menuItems));
        frame.setVisible(true);
    }
}
