package frm;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import dao.dao_khachHang;
import dao.dao_taiKhoan;
import entity.ent_khachHang;
import entity.ent_taiKhoan;
import frm_default.frm_default2;
import hieuUng.ImageResizer;

public class frm_KhachHang extends frm_default2 implements ActionListener {

	private dao_khachHang khachHangDAO;

	public frm_KhachHang() {
		setTitle("Khách Hàng");
		jTenTrang.setText("Khách Hàng");
		jTenTrang.setIcon(ImageResizer.resizeImage("/image/menuKhachHang.png", 50, 50));

		timkiem1.setText("Họ tên khách hàng");
		timkiem2.setText("Số điện thoại");
		jpHead.setLayout(new FlowLayout(FlowLayout.CENTER, 30, 10));
		tieuDeCot = new String[] { "Mã khách hàng", "Họ và tên", "Số điện thoại", "Giới tính" };

		tableModel.setColumnIdentifiers(tieuDeCot);
		tableModel.setRowCount(0);

		table.setRowHeight(30);

		// Kết nối DAO
		khachHangDAO = new dao_khachHang();
		loadData();

		btnXem.setEnabled(false);

		btnXoarong.addActionListener(this);
		btnTimKiem.addActionListener(this);
		btnXoa.addActionListener(this);
		btnXem.addActionListener(this);
		btnSua.addActionListener(this);
		btnThem.addActionListener(this);
		btnXuat.addActionListener(this);
	}

	public static void main(String[] args) {
		new frm_KhachHang();
	}

	private void loadData() {

		tableModel.setRowCount(0);

		ArrayList<ent_khachHang> danhSachKhachHang = khachHangDAO.getAllKhachHang();
		for (ent_khachHang kh : danhSachKhachHang) {
			tableModel.addRow(new Object[] {

					kh.getMaKh(), kh.getHoTen(), kh.getsDT(), kh.getGioiTinh() });
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		super.actionPerformed(e);
		Object o = e.getSource();
		if (o.equals(btnXoarong)) {
			jtftimkiem1.setText("Nhập dữ liệu");
			jtftimkiem2.setText("Nhập dữ liệu");
			loadData();
		} else if (o.equals(btnTimKiem)) {
			String hoTenSearch = jtftimkiem1.getText().trim().toLowerCase();
			String soDTSearh = jtftimkiem2.getText().trim();

			ArrayList<ent_khachHang> filteredList = new ArrayList<>();

			for (ent_khachHang kh : khachHangDAO.getAllKhachHang()) {
				boolean matchesHoTen = hoTenSearch.isEmpty() || kh.getHoTen().toLowerCase().contains(hoTenSearch);
				boolean matchesSoDT = soDTSearh.isEmpty() || kh.getsDT().contains(soDTSearh);

				if (matchesHoTen && matchesSoDT) {
					filteredList.add(kh);
				}
			}

			tableModel.setRowCount(0);
			for (ent_khachHang kh : filteredList) {
				tableModel.addRow(new Object[] { kh.getMaKh(), kh.getHoTen(), kh.getsDT(), kh.getGioiTinh() });
			}

			if (filteredList.isEmpty()) {
				JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng nào khớp với tìm kiếm!", "Thông báo",
						JOptionPane.INFORMATION_MESSAGE);
				loadData();
			}
		} else if (o.equals(btnThem)) {
			System.out.println("them");
			this.dispose();
			new frm_ChiTietKhachHang();
		} else if (o.equals(btnSua)) {
			int row = table.getSelectedRow();
			if (row != -1) {
				String maKh = table.getValueAt(row, 0).toString();
				String hoTen = table.getValueAt(row, 1).toString();
				String soDT = table.getValueAt(row, 2).toString();
				String gioiTinh = table.getValueAt(row, 3).toString();

				this.dispose();
				new frm_ChiTietKhachHang(maKh, hoTen, soDT, gioiTinh);
			} else {
				JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để sửa!", "Thông báo",
						JOptionPane.WARNING_MESSAGE);

			}
		}

		else if (o.equals(btnXem)) {
			System.out.println("xem");
		} else if (o.equals(btnXoa)) {
			int row = table.getSelectedRow();
			if (row != -1) {
				String maKH = table.getValueAt(row, 0).toString();

				int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa khách hàng này?",
						"Xác nhận xóa", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

				if (confirm == JOptionPane.YES_OPTION) {
					boolean isDeleted = khachHangDAO.deleteKhachHang(maKH);

					if (isDeleted) {
						JOptionPane.showMessageDialog(this, "Xóa khách hàng thành công!", "Thông báo",
								JOptionPane.INFORMATION_MESSAGE);
						loadData();
					} else {
						JOptionPane.showMessageDialog(this, "Xóa khách hàng không thành công!", "Lỗi",
								JOptionPane.ERROR_MESSAGE);
					}
				}
			} else {
				JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để xóa!", "Thông báo",
						JOptionPane.WARNING_MESSAGE);
			}
		} else if (o.equals(btnXuat)) {
	        // Xử lý xuất file Excel
	        JFileChooser fileChooser = new JFileChooser();
	        fileChooser.setDialogTitle("Chọn vị trí lưu file");
	        fileChooser.setSelectedFile(new File("KhachHang.xlsx"));  // Đặt tên mặc định

	        // Lọc chỉ cho phép chọn file .xlsx
	        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel Files", "xlsx"));

	        int result = fileChooser.showSaveDialog(this);

	        if (result == JFileChooser.APPROVE_OPTION) {
	            File selectedFile = fileChooser.getSelectedFile();
	            String filePath = selectedFile.getAbsolutePath();
	            
	            // Nếu người dùng không chọn đuôi .xlsx, tự động thêm vào
	            if (!filePath.endsWith(".xlsx")) {
	                filePath += ".xlsx";
	            }

	            // Chuẩn bị dữ liệu
	            String[] columns = { "Mã khách hàng", "Họ và tên", "Số điện thoại", "Giới tính" };
	            ArrayList<Object[]> data = new ArrayList<>();
	            
	            for (int i = 0; i < table.getRowCount(); i++) {
	                String maKh = table.getValueAt(i, 0).toString();
	                String hoTen = table.getValueAt(i, 1).toString();
	                String sDT = table.getValueAt(i, 2).toString();
	                String gioiTinh = table.getValueAt(i, 3).toString();
	                data.add(new Object[] { maKh, hoTen, sDT, gioiTinh });
	            }

	            // Xuất dữ liệu ra file Excel
	            ExportExcel.exportData(filePath, columns, data);
	        }
	    }
	}
}
